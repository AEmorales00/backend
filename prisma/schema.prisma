generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ---------- Enums ----------
enum RoleName {
  ADMIN
  JEFE
  BODEGUERO
  VENDEDOR
}

// User status enum for stronger typing
enum UserStatus {
  ACTIVO
  BLOQUEADO
  BAJA
}

model Product {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  barcode     String?    @unique
  price       Decimal    @db.Decimal(10, 2)
  // costo promedio para margen
  cost        Decimal    @db.Decimal(10, 2) @default(0)
  stock       Int        @default(0)
  active      Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  saleItems   SaleItem[]
  purchaseItems PurchaseItem[]
}

model Sale {
  id        Int        @id @default(autoincrement())
  total     Decimal    @db.Decimal(10, 2)
  createdAt DateTime   @default(now())
  // relaci贸n con usuario que realiza la venta
  userId    Int
  user      User       @relation(fields: [userId], references: [id])
  items     SaleItem[]
}

model SaleItem {
  id        Int     @id @default(autoincrement())
  saleId    Int
  productId Int
  // Nuevo campo qty para snapshot de cantidad al vender (se mantiene quantity para compatibilidad)
  qty       Int      @default(0)
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  // snapshot de costo al vender
  cost      Decimal @db.Decimal(10, 2) @default(0)
  subtotal  Decimal @db.Decimal(10, 2)
  product   Product @relation(fields: [productId], references: [id])
  sale      Sale    @relation(fields: [saleId], references: [id])

  @@index([productId], map: "SaleItem_productId_fkey")
  @@index([saleId], map: "SaleItem_saleId_fkey")
}

model User {
  id           Int      @id @default(autoincrement())
  name         String
  email        String   @unique
  passwordHash String
  // Columna legacy para compatibilidad mientras migras a M:N
  role         String?
  // ACTIVO | BLOQUEADO | BAJA
  status       UserStatus @default(ACTIVO)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  // relaci贸n con roles (RBAC)
  roles        UserRole[]
  // relaci贸n con ventas
  sales        Sale[]
  // relaci贸n con compras/ingresos (bodega)
  purchases   Purchase[]
}

model Role {
  id    Int      @id @default(autoincrement())
  name  RoleName @unique
  users UserRole[]
}

model UserRole {
  user       User   @relation(fields: [userId], references: [id])
  userId     Int
  role       Role   @relation(fields: [roleId], references: [id])
  roleId     Int
  assignedAt DateTime @default(now())

  @@id([userId, roleId])
}

// ---------- Bodega (Ingresos) ----------
model Supplier {
  id        Int        @id @default(autoincrement())
  name      String
  nit       String?    @unique
  phone     String?
  email     String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  purchases Purchase[]
}

model Purchase {
  id         Int        @id @default(autoincrement())
  supplierId Int?
  userId     Int
  totalCost  Decimal    @db.Decimal(12, 2) @default(0)
  note       String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  supplier   Supplier?  @relation(fields: [supplierId], references: [id])
  user       User       @relation(fields: [userId], references: [id])
  items      PurchaseItem[]
}

model PurchaseItem {
  id         Int       @id @default(autoincrement())
  purchaseId Int
  productId  Int
  quantity   Int
  unitCost   Decimal   @db.Decimal(10, 2) @default(0)
  subtotal   Decimal   @db.Decimal(12, 2) @default(0)

  purchase   Purchase  @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  product    Product   @relation(fields: [productId], references: [id])
}
